/* DO NOT EDIT THIS FILE - it is machine generated */
/* Header for class com_tencent_tnn_demo_video_VideoGrade */

#include <jni.h>
#include "video_grade_jni.h"
#include "helper_jni.h"
#include <android/bitmap.h>
#include <tnn/utils/mat_utils.h>
#include <kannarotate-android-lib/include/kannarotate.h>
#include "VideoGradeInterface.h"


/**
 * 0  CPU
 * 1 GPU
 * 2 huawei NPU
 */
static int gComputeUnitType = TNN_NS::TNNComputeUnitsCPU;
static std::shared_ptr<TNN_NS::VideoGradeImpl> videoGradeImpl;

static jclass clsFaceInfo;
static jmethodID midconstructorFaceInfo;
static jfieldID fidx1;
static jfieldID fidy1;
static jfieldID fidx2;
static jfieldID fidy2;
static jfieldID fidkeypoints;


#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_tencent_tnn_demo_video_VideoGrade
 * Method:    initTNN
 * Signature: (Ljava/lang/String;Ljava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_com_tencent_tnn_demo_video_VideoGrade_initTNN
    (JNIEnv *env, jobject thiz, jstring j_modelAbsolutePath, jstring j_protoAbsolutePath, jint computUnitType) {

  videoGradeImpl = std::make_shared<TNN_NS::VideoGradeImpl>();

  std::string model_path, proto_path;
  model_path = jstring2string(env, j_modelAbsolutePath);
  proto_path = jstring2string(env, j_protoAbsolutePath);

  // for test
  model_path = "/data/user/0/com.tencent.tnn.demo/files/blazeface.tnnmodel";
  proto_path = "/data/user/0/com.tencent.tnn.demo/files/blazeface.tnnproto";

  gComputeUnitType = computUnitType;
  LOGI("modelAbsolutePath=%s, protoAbsolutePath=%s, gComputeUnitType=%d", model_path.c_str(), proto_path.c_str(), gComputeUnitType);

  std::string proto_content, model_content, lib_path = "";
  proto_content = fdLoadFile(proto_path);
  model_content = fdLoadFile(model_path);
  LOGI("proto content size %d model content size %d", proto_content.length(),model_content.length());

  TNN_NS::Status status = TNN_NS::TNN_OK;
  auto option = std::make_shared<TNN_NS::VideoGradeOption>();
  makeVideoGradeOption(option, lib_path, proto_content, model_content);

  if (gComputeUnitType == 1) {
    option->compute_units = TNN_NS::TNNComputeUnitsGPU;
    status = videoGradeImpl->Init(option);
  } else {
    option->compute_units = TNN_NS::TNNComputeUnitsCPU;
    status = videoGradeImpl->Init(option);
  }

  if (status != TNN_NS::TNN_OK) {
    LOGE("detector init failed %d", (int) status);
    return -1;
  }

  if (clsFaceInfo == NULL) {
    clsFaceInfo = static_cast<jclass>(env->NewGlobalRef(
        env->FindClass("com/tencent/tnn/demo/FaceInfo")));
    midconstructorFaceInfo = env->GetMethodID(clsFaceInfo, "<init>", "()V");
    fidx1 = env->GetFieldID(clsFaceInfo, "x1", "F");
    fidy1 = env->GetFieldID(clsFaceInfo, "y1", "F");
    fidx2 = env->GetFieldID(clsFaceInfo, "x2", "F");
    fidy2 = env->GetFieldID(clsFaceInfo, "y2", "F");
    fidkeypoints = env->GetFieldID(clsFaceInfo, "keypoints", "[[F");
  }

 // proto_content = fdLoadFile();
  return 10;
}

void makeVideoGradeOption(std::shared_ptr<TNN_NS::VideoGradeOption> &option,
                               std::string &lib_path, std::string &proto_content,
                               std::string &model_content) {
  option->library_path = lib_path;
  option->proto_content = proto_content;
  option->model_content = model_content;
  option->compute_units = TNN_NS::TNNComputeUnitsCPU;

  // for test
  option->input_width = 128;
  option->input_height = 128;
//    option->min_score_threshold = 0.75;
  option->min_suppression_threshold = 0.3;
  option->anchor_path = "/data/user/0/com.tencent.tnn.demo/files/blazeface_anchors.txt";
}

/*
 * Class:     com_tencent_tnn_demo_video_VideoGrade
 * Method:    deinit
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_tencent_tnn_demo_video_VideoGrade_deinit
    (JNIEnv *, jobject) {
  return 12;

}

#ifdef __cplusplus
}
#endif
